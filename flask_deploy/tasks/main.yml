---
# tasks file for roles/flask_deploy
    - name: Install required packages
      apt:
        name:
          - git
          - nginx
          - python3
          - python3-venv
          - uwsgi
          - uwsgi-plugin-python3
          - openssl
          - python3-dev
        state: present
        update_cache: yes

    - name: Create project directory
      file:
        path: "{{ project_dir }}"
        state: directory
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: '0755'

    - name: Clone repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ project_dir }}"
        force: yes

    - name: Set up Python virtual environment
      pip:
        virtualenv: "{{ project_dir }}/venv"
        virtualenv_command: python3 -m venv
        name:
          - uwsgi
          - Flask
        state: present

    - name: Set executable permission on uwsgi binary
      file:
        path: "{{ project_dir }}/venv/bin/uwsgi"
        mode: '0755'
        state: file

    - name: Create uWSGI configuration
      copy:
        dest: "{{ project_dir }}/{{ project_name }}.ini"
        content: |
          [uwsgi]
          module = wsgi:app
          master = true
          processes = 5
          socket = {{ project_dir }}/{{ project_name }}.sock
          chmod-socket = 660
          vacuum = true
          die-on-term = true

    - name: Create uWSGI service
      copy:
        dest: "/etc/systemd/system/{{ project_name }}.service"
        content: |
          [Unit]
          Description=uWSGI service for {{ project_name }}
          After=network.target

          [Service]
          User={{ user }}
          Group={{ group }}
          WorkingDirectory={{ project_dir }}
          Environment="PATH={{ project_dir }}/venv/bin"
          ExecStart={{ project_dir }}/venv/bin/uwsgi --ini {{ project_name }}.ini
          StandardOutput=journal
          StandardInput=journal

          [Install]
          WantedBy=multi-user.target

    - name: Generate SSL certificate
      command: >
        openssl req -x509 -nodes -days 365 -newkey rsa:2048
        -keyout /etc/ssl/private/nginx-selfsigned.key
        -out /etc/ssl/certs/nginx-selfsigned.crt
        -subj "/C=US/ST=State/L=City/O=Organization/CN={{ domain }}"
      args:
        creates: /etc/ssl/certs/nginx-selfsigned.crt

    - name: Generate DH parameters
      command: openssl dhparam -out /etc/nginx/dhparam.pem 2048
      args:
        creates: /etc/nginx/dhparam.pem

    - name: Create SSL snippets directory
      file:
        path: /etc/nginx/snippets
        state: directory

    - name: Configure self-signed SSL snippet
      copy:
        dest: "/etc/nginx/snippets/self-signed.conf"
        content: |
          ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
          ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

    - name: Configure SSL parameters snippet
      copy:
        dest: "/etc/nginx/snippets/ssl-params.conf"
        content: |
          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_ciphers HIGH:!aNULL:!MD5;
          ssl_prefer_server_ciphers on;
          ssl_session_cache shared:SSL:10m;
          ssl_dhparam /etc/nginx/dhparam.pem;

    - name: Configure Nginx
      copy:
        dest: "/etc/nginx/sites-available/{{ project_name }}"
        content: |
          server {
              listen 80;
              server_name {{ domain }};
              return 301 https://$host$request_uri;
          }

          server {
              listen 443 ssl;
              server_name {{ domain }};

              include snippets/self-signed.conf;
              include snippets/ssl-params.conf;

              location / {
                  include uwsgi_params;
                  uwsgi_pass unix:{{ project_dir }}/{{ project_name }}.sock;
              }
          }

    - name: Enable Nginx site
      file:
        src: "/etc/nginx/sites-available/{{ project_name }}"
        dest: "/etc/nginx/sites-enabled/{{ project_name }}"
        state: link

    - name: Configure UFW
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - '80'
        - '443'

    - name: Start and enable services
      systemd:
        name: "{{ item }}"
        state: restarted
        enabled: yes
        daemon_reload: yes
      loop:
        - "{{ project_name }}"
        - nginx